import loguru
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from django.conf import settings

from .state import (
    QuestionState,
    FeedBackState,
    PostTopicOfferState,
)
from models import (
    TelegramUser,
    PostFeedBackRequest,
    FeedBack,
    Question,
    PostTopicOffer
) 
from keyboards.reply import (
    reply_menu_keyboard,
    reply_cancel_keyboard
)


router = Router()


@router.message(
    StateFilter('*'),
    (F.text.casefold() == '–æ—Ç–º–µ–Ω–∞ ‚ùå')
)
async def cancel_callback_handler(
    message: types.Message,
    state: FSMContext,
):
    await state.clear()
    await message.answer(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        reply_markup=reply_menu_keyboard,
    )


@router.message(F.text.casefold() == '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì')
async def ask_question_message_handler(
    message: types.Message,
    state: FSMContext,
):
    await message.answer(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å?',
        reply_markup=reply_cancel_keyboard,
    )
    await state.set_state(QuestionState.text)
    
    
@router.message(F.text, QuestionState.text)
async def process_question_message_handler(
    message: types.Message,
    state: FSMContext,
):
    telegram_user = await TelegramUser.objects.aget(
        telegram_id=message.from_user.id
    )
    await Question.objects.acreate(
        text=message.text,
        telegram_user=telegram_user,
    )
    await message.answer(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n'
        '–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.',
        reply_markup=reply_menu_keyboard,
    )
    await state.clear()
    
    
@router.message(
    F.text.casefold() == '–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üì§'
)
async def send_feedback_message_handler(
    message: types.Message,
    state: FSMContext,
):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
        '–Ø –∑–∞–ø–∏—à—É –∏ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞.',
        reply_markup=reply_cancel_keyboard,
    )
    await state.set_state(FeedBackState.text)
    
    
@router.message(F.text, FeedBackState.text)
async def process_feedback_message_handler(
    message: types.Message,
    state: FSMContext,
):
    telegram_user = await TelegramUser.objects.aget(
        telegram_id=message.from_user.id
    )
    await FeedBack.objects.acreate(
        text=message.text,
        telegram_user=telegram_user,
    )
    await message.answer(
        '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!',
        reply_markup=reply_menu_keyboard,
    )
    await state.clear()
    
    
@router.message(
    F.text.casefold() == '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É –ø–æ—Å—Ç–∞ üìù'
)
async def offer_post_topic_message_handler(
    message: types.Message,
    state: FSMContext,
):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞.',
        reply_markup=reply_cancel_keyboard,
    )
    await state.set_state(PostTopicOfferState.text)
    
    
@router.message(F.text, PostTopicOfferState.text)
async def process_post_topic_message_handler(
    message: types.Message,
    state: FSMContext,
):
    telegram_user = await TelegramUser.objects.aget(
        telegram_id=message.from_user.id
    )
    await PostTopicOffer.objects.acreate(
        text=message.text,
        telegram_user=telegram_user,
    )
    await message.answer(
        '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!',
        reply_markup=reply_menu_keyboard,
    )
    await state.clear()
    
    
    
@router.callback_query(F.data.startswith('contact_me_'))
async def contact_me_callback_handler(
    callback: types.CallbackQuery,
):
    telegram_user, _ = await TelegramUser.objects.aget_or_create(
        telegram_id=callback.from_user.id,
        defaults={'username': callback.from_user.username}
    )
    post_id = callback.data.split('_')[-1]
    post, created = await PostFeedBackRequest.objects.aget_or_create(
        post_id=post_id,
        telegram_user=telegram_user,
    )
    
    if not created:
        await callback.answer(
            '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å. '
            '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.'
        )
        return
    
    await callback.answer(
        '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç,'
        '—Å–∫–æ—Ä–æ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä.'
    )
    post_link = f'{settings.CHANNEL_LINK}/{callback.message.message_id}'
    
    if telegram_user.manager_account:
        manager_account = f'@{telegram_user.manager_account}'
    else:
        manager_account = '–Ω–µ—Ç'
        
    await callback.bot.send_message(
        text=(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —Ö–æ—á–µ—Ç, '
            f'—á—Ç–æ–±—ã —Å –Ω–∏–º —Å–≤—è–∑–∞–ª–∏—Å—å –ø–æ <a href="{post_link}">–ø–æ—Å—Ç—É</a>\n\n'
            f'–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_account}'
        ),
        chat_id=settings.CONTACT_GROUP_ID,
        parse_mode='HTML'
    )
    
    
    
